{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"date":"2021-08-01T00:00:00.000Z","title":"Gatsby で雑にマークダウン形式ブログを作る"},"html":"<h1>Gatsby で雑にマークダウン形式ブログを作る</h1>\n<p>「そうだ、自作ブログを作ろう。」<br>\n「どうせなら Qiita の記事をそのままブログに載せられるようにしたい。」<br>\n「もっというと、マークダウン形式のファイルをそのままブログに突っ込めるようにしたい。」<br>\n「でも面倒なことはしたくない。サーバーすら立てたくない」</p>\n<p>こんなわがままでもブログが作れてしまいます。<br>\nそう、Gatsby ならね。</p>\n<h2>前準備</h2>\n<p>npm がインストールされている前提で進めます。<br>\nまずは Gatsby のプロジェクトを作成しましょう<br>\n<a href=\"https://www.gatsbyjs.com/docs/tutorial/part-0/#gatsby-cli\">公式のチュートリアル</a>を見つつ、コマンドをぽちぽち叩いていきましょう。</p>\n<pre><code class=\"language-terminal\">npm install -g gatsby-cli\ngatsby new {任意のプロジェクト名}\n</code></pre>\n<p>これで完了です。早い。<br>\n生成されたディレクトリに移動し、<code>npm run develop</code>を実行することで Gatsby のデフォルトページが閲覧できます。<br>\nTypeScript を使いたい場合は<code>src/pages</code>ディレクトリ中の<code>js</code>ファイルの拡張子を<code>tsx</code>に変えましょう。もともと TypeScript での開発も想定されているようで、これだけで機能します。すごい。</p>\n<h2>マークダウンファイルのパース</h2>\n<p>下準備はできたので、早速本題に入りましょう。<br>\nマークダウンをパースするためには<a href=\"https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/\">gatsby-transformer-remark</a>を使います。<br>\n<code>npm install gatsby-transformer-remark</code>でインストールし、<code>gatsby-config.js</code>に設定を加えましょう。</p>\n<pre><code class=\"language-javascript:gatsby-config.js\">  plugins: [\n    `gatsby-transformer-remark`,\n  ],\n</code></pre>\n<p>プラグイン項目に記述を追加するだけで動作してくれます。</p>\n<p>次に、実際に読み込みたいマークダウンファイルを追加します。<br>\nプロジェクトのルートディレクトリ配下ならどこでもいいのですが、今回は<code>src/markdown</code>配下に追加することとします。<br>\n適当に記述したマークダウンファイルを配置できたら、再び<code>gatsby-config.js</code>に記述を追加しましょう。</p>\n<pre><code class=\"language-javascript:gatsby-config.js\">  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `markdown`,\n        path: `${__dirname}/src/markdown`,\n      },\n    },\n  ]\n</code></pre>\n<p>こちらの設定はマークダウンファイルを Gatsby のエコシステムで認識できるようにするためのものです。</p>\n<p>ここまで設定できたら、一度ローカル環境で起動し、<code>http://localhost:8000/___graphql</code>にアクセスしてみましょう。<br>\nGatsby では GraphQL を採用しており、様々な情報を GraphQL 経由で取得することができます。<br>\n今回追加したマークダウンファイルについても同様で、上記の設定を追加することで GraphQL から取得できようになっています。<br>\n下記のクエリを投げてみましょう。</p>\n<pre><code class=\"language-graphql\">query MyQuery {\n  allMarkdownRemark {\n    nodes {\n      html\n    }\n  }\n}\n</code></pre>\n<p>問題がなければ、先ほど追加したマークダウンファイルが HTML 形式で取得できているはずです。</p>\n<h2>Gatsby への追加</h2>\n<p>では、上記で取得できた HTML を Gatsby に追加していきましょう。<br>\n先ほど行った修正により、マークダウンファイルを HTML 形式で GraphQL 経由で取得することができるようになっています。<br>\nGatsby ではこの GraphQL を利用することができます。</p>\n<pre><code class=\"language-javascript:index.js\">import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nexport const query = graphql`\n  query MyQuery {\n    allMarkdownRemark {\n      nodes {\n        id\n        html\n      }\n    }\n  }\n`\n\nconst IndexPage = ({data}) => (\n  &#x3C;Layout>\n    &#x3C;div dangerouslySetInnerHTML={{__html: data.allMarkdownRemark.nodes[0].html}}>&#x3C;/div>\n  &#x3C;/Layout>\n)\n\nexport default IndexPage\n</code></pre>\n<p>GraphQL で取得したデータは、引数に<code>data</code>を指定することで読み込むことができます。簡単ですね。<br>\nHTML 形式で取得しているので、あとはそのまま出力するように突っ込むだけです。</p>\n<p>今回利用している<code>dangerouslySetInnerHTML</code>は React で提供されている属性です。<br>\nわざわざ<code>dangerously</code>としているのは XSS の危険性があるためです。詳しいことは<a href=\"https://ja.reactjs.org/docs/dom-elements.html\">公式のドキュメント</a>を参照してください。</p>\n<p>あとは<code>npm run develop</code>などで結果を確認するだけです。<br>\nうまく設定できていれば、マークダウンファイルの中身がちゃんと表示されているはずです。</p>\n<h2>おわりに</h2>\n<p>というわけで、Gatsby なら簡単にマークダウン形式のブログが作れるよ、という記事でした。<br>\n私は上記に加え Github Pages を利用することで、簡単な俺俺ブログにしています。<br>\n厳密には Qiita では改行コードがそのまま改行として扱われますが、今回作成したものではちゃんとスペースを 2 つ並べなければ改行されません。<br>\nとはいえあとはほぼそのままで動きますし、改行させるだけなら大した手間ではないでしょう。<br>\nGatsby は便利だなぁ。</p>"},{"frontmatter":{"date":"2021-08-09T00:00:00.000Z","title":"Rustでズンドコキヨシ"},"html":"<h1>Rust でズンドコキヨシ</h1>\n<p>先駆者様: <a href=\"https://qiita.com/tatsuya6502/items/aea38af7fcfb912c3aff\">ズンドコキヨシ with Rust</a></p>\n<h2>TL;DR</h2>\n<pre><code class=\"language-console\">$ ./target/debug/zundoko-cli\nズンズンドコドコドコズンズンズンズンドコ\nキ・ヨ・シ！\n</code></pre>\n<h2>コード</h2>\n<pre><code class=\"language-rust:main.rs\">use rand;\n\nfn main() {\n    println!(\"{}\", ZundokoKiyoshi::build_str());\n}\n\nenum Zundoko {\n    Zun,\n    Doko,\n}\n\nimpl ToString for Zundoko {\n    fn to_string(&#x26;self) -> String {\n        match self {\n            Self::Zun => \"ズン\".to_string(),\n            Self::Doko => \"ドコ\".to_string(),\n        }\n    }\n}\n\nstruct ZundokoKiyoshi;\n\nimpl ZundokoKiyoshi {\n    fn zundoko() -> Zundoko {\n        match rand::random() {\n            true => Zundoko::Zun,\n            false => Zundoko::Doko,\n        }\n    }\n\n    fn kiyoshi() -> String {\n        \"\\nキ・ヨ・シ！\".to_string()\n    }\n\n    fn build_str() -> String {\n        let mut result = String::new();\n        let mut cnt = 0;\n\n        loop {\n            let zundoko = Self::zundoko();\n            result += &#x26;zundoko.to_string();\n\n            match zundoko {\n                Zundoko::Zun => cnt += 1,\n                Zundoko::Doko if cnt &#x3C; 4 => cnt = 0,\n                _ => {\n                    result += &#x26;Self::kiyoshi();\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n}\n</code></pre>\n<h2>終わりに</h2>\n<p>Rust は触っていないとすぐお作法を忘れてしまいますね。\nズンドコキヨシはリハビリにはちょうどよかったです。</p>\n<p>今回はちょっと冗長なコードで記述させていただきました。\nでも先駆者様はすごくシンプルなコードで記述できているんですよね。見習いたいです。</p>"}]}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}