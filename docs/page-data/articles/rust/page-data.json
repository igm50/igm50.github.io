{"componentChunkName":"component---src-pages-articles-markdown-remark-frontmatter-title-tsx","path":"/articles/rust/","result":{"data":{"markdownRemark":{"frontmatter":{"date":"2021-08-09T00:00:00.000Z","title":"Rustでズンドコキヨシ"},"html":"<h1>Rust でズンドコキヨシ</h1>\n<p>先駆者様: <a href=\"https://qiita.com/tatsuya6502/items/aea38af7fcfb912c3aff\">ズンドコキヨシ with Rust</a></p>\n<h2>TL;DR</h2>\n<pre><code class=\"language-console\">$ ./target/debug/zundoko-cli\nズンズンドコドコドコズンズンズンズンドコ\nキ・ヨ・シ！\n</code></pre>\n<h2>コード</h2>\n<pre><code class=\"language-rust:main.rs\">use rand;\n\nfn main() {\n    println!(\"{}\", ZundokoKiyoshi::build_str());\n}\n\nenum Zundoko {\n    Zun,\n    Doko,\n}\n\nimpl ToString for Zundoko {\n    fn to_string(&#x26;self) -> String {\n        match self {\n            Self::Zun => \"ズン\".to_string(),\n            Self::Doko => \"ドコ\".to_string(),\n        }\n    }\n}\n\nstruct ZundokoKiyoshi;\n\nimpl ZundokoKiyoshi {\n    fn zundoko() -> Zundoko {\n        match rand::random() {\n            true => Zundoko::Zun,\n            false => Zundoko::Doko,\n        }\n    }\n\n    fn kiyoshi() -> String {\n        \"\\nキ・ヨ・シ！\".to_string()\n    }\n\n    fn build_str() -> String {\n        let mut result = String::new();\n        let mut cnt = 0;\n\n        loop {\n            let zundoko = Self::zundoko();\n            result += &#x26;zundoko.to_string();\n\n            match zundoko {\n                Zundoko::Zun => cnt += 1,\n                Zundoko::Doko if cnt &#x3C; 4 => cnt = 0,\n                _ => {\n                    result += &#x26;Self::kiyoshi();\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n}\n</code></pre>\n<h2>終わりに</h2>\n<p>Rust は触っていないとすぐお作法を忘れてしまいますね。\nズンドコキヨシはリハビリにはちょうどよかったです。</p>\n<p>今回はちょっと冗長なコードで記述させていただきました。\nでも先駆者様はすごくシンプルなコードで記述できているんですよね。見習いたいです。</p>"}},"pageContext":{"id":"1d2f7ac3-29a7-5802-a6d8-850c5c5d4fb2","frontmatter__title":"Rustでズンドコキヨシ","__params":{"frontmatter__title":"rust"}}},"staticQueryHashes":["3649515864","63159454"]}